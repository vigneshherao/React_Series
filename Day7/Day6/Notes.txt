Day 7 Part 1

Detail of useEffect?

useEffect is the normal javascript utilty function 
it has two arguments one is callback function and one is dependency array

scenrio 1 - without dependency array

it will call when the component renders' will call every render's 

scenrio 2 - with dependency array

it will call only initial rendering ! only calls on first rendering the component


scenrio 3 - with dependency array with value

it will call on inital rendering and also on the value updates this useEffect will be called again



2- console.log(usestate());

returns an array with two elements: the current state value and a
function to update that state value .


cliend side routing and server side routing?


A: Client-side routing and server-side routing are two different approaches to
handling routing and navigation in web applications. They have distinct
characteristics and are often used for different purposes. Here's an overview of
the key differences between them:
Client-Side Routing :  Handling on the Client - In client-side routing, routing and
navigation are managed on the client side, typically within the web browser.
JavaScript frameworks and libraries, such as React Router (for React applications)
or Vue Router (for Vue.js applications), are commonly used to implement clientside routing.
Faster Transitions - Client-side routing allows for faster page transitions since it
doesn't require the server to send a new HTML page for each route change.
Instead, it updates the DOM and URL dynamically without full page reloads.
Single-Page Application (SPA) - Client-side routing is often associated with singlepage applications (SPAs), where the initial HTML page is loaded, and subsequent
page changes are made by updating the content using JavaScript.
SEO Challenges - SPAs can face challenges with search engine optimization (SEO)
because search engine crawlers may not fully index the content that relies heavily
on client-side rendering. Special techniques like server-side rendering (SSR) or
pre-rendering can be used to address this issue.
Route Management - Routing configuration is typically defined in code and managed
on the client side, allowing for dynamic and flexible route handling.
-  Server-Side Routing :
Handling on the Server - Server-side routing manages routing and navigation on the
server. When a user requests a different URL, the server generates and sends a
new HTML page for that route.
Slower Transitions - Server-side routing tends to be slower in terms of page
transitions compared to client-side routing, as it involves full page reloads.
Traditional Websites - Server-side routing is commonly used for traditional multipage websites where each page is a separate HTML document generated by the
server.
SEO-Friendly - Server-side routing is inherently more SEO-friendly, as each page is
a separate HTML document that can be easily crawled and indexed by search
Episode-07 | Finding The Path 13
engines.
Route Configuration - Routing configuration in server-side routing is typically
managed on the server, and URLs directly correspond to individual HTML files or
routes.
In summary, client-side routing is suitable for building SPAs and offers faster, more
interactive user experiences but can pose SEO challenges. Server-side routing is
more SEO-friendly and is used for traditional websites with separate HTML pages,
but it can be slower in terms of page transitions. The choice between these two
routing approaches depends on the specific requirements and goals of a web
application or website. In some cases, a hybrid approach that combines both
client-side and server-side routing techniques may be used to achieve the best of
both worlds.