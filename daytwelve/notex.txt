1.useContext vs Redux
Both are called the global state variale used for avoiding the props drilling!

Scope : -> useContext  is part of the React core and is used for managing state within
the component tree. It provides a way to access the value of a context directly
within a component and its descendants. It's typically used for smaller-scale state
management needs within a component or a small section of the application.

Complexity :-> useContext is simpler and more lightweight compared to Redux. It's a
part of the React library and doesn't introduce additional concepts or boilerplate
code.

Component Coupling : State managed with useContext is local to the component or a
subtree of components where the context is provided. This can lead to more
isolated and less globally shared state.

Integration :-> It's seamlessly integrated into React and works well with the
component lifecycle. You can create and consume contexts within functional
components using the useContext hook.


Scope : Redux is a state management library that provides a global state container
for the entire application. It allows you to manage the application state in a
predictable and centralized manner.

Complexity : Redux introduces a set of concepts, such as actions, reducers, and a
store. This can make it more complex compared to using useContext for local
state management. However, it becomes valuable in larger and more complex
applications.


Component Coupling : State managed with Redux is global, which means any
component can connect to and access the state. This can be advantageous for
sharing state across different parts of the application.

Integration : Redux needs to be integrated separately into a React application. You
need to create actions, reducers, and a store. Components interact with the global
state using the connect function or hooks like useSelector and useDispatch.



2.Advantage of using Redux Toolkit over Redux



3.Explain Dispatcher.
Dispatching is can hook which give useDispatch when we have to change any state variale that time we should call the dispatch func


● Explain Reducer.

Reducer is a group of reducer from seprate sepreate slice



● Explain slice.

Slice is a one part of the store in Redux eg:userSLice

● Explain selector.

selector is used to subscribe the store from there we can acess the state from Redux

● Explain createSlice and the configuration it takes.

it will take name , inital staate, reducuer ( actions)


